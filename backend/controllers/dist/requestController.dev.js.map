{"version":3,"sources":["requestController.js"],"names":["asyncHandler","require","Request","Transaction","User","crypto","requestAmount","req","res","body","receiver","amount","description","findById","moneyreceiver","user","_id","status","Error","request","sender","save","findByIdAndUpdate","$inc","requestReceived","json","getAllRequest","find","$or","populate","sort","createdAt","requests","getRequestSendTransaction","path","select","getRequestReceivedTransaction","updateRequestStats","transactionType","reference","create","transactionId","randomBytes","toString","transaction","balance","updatedRequest","message","module","exports"],"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","sourcesContent":["// const asyncHandler = require('express-async-handler')\r\n// const Request = require('../models/requestModal')\r\n// const Transaction = require('../models/transactionModal')\r\n// const User = require('../models/userModal')\r\n// const crypto = require('crypto')\r\n\r\n// // @desc    send request to another user\r\n// // @route   POST /api/request\r\n// // @access  Private\r\n\r\n// const requestAmount = asyncHandler(async (req, res) => {\r\n//   const { receiver, amount, description } = req.body\r\n//   const moneyreceiver = await User.findById(receiver)\r\n//   if (req.user._id == receiver || !moneyreceiver) {\r\n//     res.status(400)\r\n//     throw new Error('request not send')\r\n//   } else {\r\n//     try {\r\n//       if (!receiver || !amount || !description) {\r\n//         res.status(400)\r\n//         throw new Error('please include all fields')\r\n//       }\r\n//       const request = new Request({\r\n//         sender: req.user._id,\r\n//         receiver,\r\n//         amount,\r\n//         description,\r\n//       })\r\n//       await request.save()\r\n//       await User.findByIdAndUpdate(\r\n//         receiver,\r\n//         { $inc: { requestReceived: 1 } },\r\n//         { new: true }\r\n//       )\r\n//       res.status(201).json(request)\r\n//     } catch (error) {\r\n//       throw new Error(error)\r\n//     }\r\n//   }\r\n// })\r\n\r\n// // @desc    get all request for a user\r\n// // @route   POST /api/get-request\r\n// // @access  Private\r\n// const getAllRequest = asyncHandler(async (req, res) => {\r\n//   // console.log(req.user)\r\n//   try {\r\n//     const requests = await Request.find({\r\n//       $or: [{ sender: req.user._id }, { receiver: req.user._id }],\r\n//     })\r\n//       .populate('sender')\r\n//       .populate('receiver')\r\n//       .sort({ createdAt: -1 })\r\n      \r\n//     if (requests) {\r\n//       return res.status(200).json(requests)\r\n//     }\r\n//   } catch (error) {\r\n//     res.status(404)\r\n//     throw new Error(error)\r\n//   }\r\n// })\r\n\r\n// const getRequestSendTransaction = asyncHandler(async (req, res) => {\r\n//   const requests = await Request.find({ sender: req.user._id })\r\n//     .sort({ createdAt: -1 })\r\n//     .populate([\r\n//       { path: 'sender', select: 'name image' },\r\n//       { path: 'receiver', select: 'name image' },\r\n//     ])\r\n//   if (requests) {\r\n//     res.status(200).json(requests)\r\n//   } else {\r\n//     res.status(400)\r\n//     throw new Error('no requests send')\r\n//   }\r\n// })\r\n// const getRequestReceivedTransaction = asyncHandler(async (req, res) => {\r\n//   const requests = await Request.find({ receiver: req.user._id })\r\n//     .sort({ createdAt: -1 })\r\n//     .populate([\r\n//       { path: 'sender', select: 'name image' },\r\n//       { path: 'receiver', select: 'name image' },\r\n//     ])\r\n//   if (requests) {\r\n//     res.status(200).json(requests)\r\n//   } else {\r\n//     res.status(400)\r\n//     throw new Error('no requests received')\r\n//   }\r\n// })\r\n\r\n// // @desc    update request status\r\n// // @route   POST /api/update-request-status\r\n// // @access  Private\r\n// const updateRequestStats = asyncHandler(async (req, res) => {\r\n//   const { _id, sender, receiver, amount, transactionType, reference, status } =\r\n//     req.body\r\n\r\n//   try {\r\n//     if (status === 'accepted') {\r\n//       const transaction = await Transaction.create({\r\n//         sender: sender,\r\n//         receiver: receiver,\r\n//         amount: amount,\r\n//         transactionType: transactionType,\r\n//         transactionId: crypto.randomBytes(5).toString('hex'),\r\n//         reference: reference,\r\n//       })\r\n\r\n//       // await transaction.save()\r\n\r\n//       // deduct the amount from the sender\r\n//       await User.findByIdAndUpdate(sender, {\r\n//         $inc: { balance: -amount },\r\n//       })\r\n\r\n//       // add the amount to the receiver\r\n//       await User.findByIdAndUpdate(receiver, {\r\n//         $inc: { balance: amount },\r\n//       })\r\n//       res.status(201).json(transaction)\r\n\r\n//       await Request.findByIdAndUpdate(\r\n//         _id,\r\n//         {\r\n//           status: status,\r\n//         },\r\n//         { new: true }\r\n//       )\r\n//     }\r\n//   } catch (error) {\r\n//     res.status(404)\r\n//     throw new Error(error)\r\n//   }\r\n// })\r\n\r\n// module.exports = {\r\n//   requestAmount,\r\n//   getAllRequest,\r\n//   updateRequestStats,\r\n//   getRequestSendTransaction,\r\n//   getRequestReceivedTransaction,\r\n// }\r\nconst asyncHandler = require('express-async-handler')\r\nconst Request = require('../models/requestModal')\r\nconst Transaction = require('../models/transactionModal')\r\nconst User = require('../models/userModal')\r\nconst crypto = require('crypto')\r\n\r\n// @desc    send request to another user\r\n// @route   POST /api/request\r\n// @access  Private\r\nconst requestAmount = asyncHandler(async (req, res) => {\r\n  const { receiver, amount, description } = req.body\r\n  const moneyreceiver = await User.findById(receiver)\r\n\r\n  if (req.user._id == receiver || !moneyreceiver) {\r\n    res.status(400)\r\n    throw new Error('Request not sent')\r\n  }\r\n\r\n  if (!receiver || !amount || !description) {\r\n    res.status(400)\r\n    throw new Error('Please include all fields')\r\n  }\r\n\r\n  const request = new Request({\r\n    sender: req.user._id,\r\n    receiver,\r\n    amount,\r\n    description,\r\n  })\r\n\r\n  await request.save()\r\n\r\n  await User.findByIdAndUpdate(\r\n    receiver,\r\n    { $inc: { requestReceived: 1 } },\r\n    { new: true }\r\n  )\r\n\r\n  res.status(201).json(request)\r\n})\r\n\r\n// @desc    get all requests involving user\r\n// @route   POST /api/get-request\r\n// @access  Private\r\nconst getAllRequest = asyncHandler(async (req, res) => {\r\n  try {\r\n    const requests = await Request.find({\r\n      $or: [{ sender: req.user._id }, { receiver: req.user._id }],\r\n    })\r\n      .populate('sender')\r\n      .populate('receiver')\r\n      .sort({ createdAt: -1 })\r\n\r\n    if (requests) {\r\n      return res.status(200).json(requests)\r\n    }\r\n  } catch (error) {\r\n    res.status(404)\r\n    throw new Error(error)\r\n  }\r\n})\r\n\r\n// @desc    get all requests sent by user\r\n// @route   POST /api/request-sent\r\n// @access  Private\r\nconst getRequestSendTransaction = asyncHandler(async (req, res) => {\r\n  const requests = await Request.find({ sender: req.user._id })\r\n    .sort({ createdAt: -1 })\r\n    .populate([\r\n      { path: 'sender', select: 'name image' },\r\n      { path: 'receiver', select: 'name image' },\r\n    ])\r\n\r\n  if (requests) {\r\n    res.status(200).json(requests)\r\n  } else {\r\n    res.status(400)\r\n    throw new Error('No requests sent')\r\n  }\r\n})\r\n\r\n// @desc    get all requests received by user\r\n// @route   POST /api/request-received\r\n// @access  Private\r\nconst getRequestReceivedTransaction = asyncHandler(async (req, res) => {\r\n  const requests = await Request.find({ receiver: req.user._id })\r\n    .sort({ createdAt: -1 })\r\n    .populate([\r\n      { path: 'sender', select: 'name image' },\r\n      { path: 'receiver', select: 'name image' },\r\n    ])\r\n\r\n  if (requests) {\r\n    res.status(200).json(requests)\r\n  } else {\r\n    res.status(400)\r\n    throw new Error('No requests received')\r\n  }\r\n})\r\n\r\n// @desc    update request status (accepted, denied, or pending)\r\n// @route   POST /api/update-request-status\r\n// @access  Private\r\nconst updateRequestStats = asyncHandler(async (req, res) => {\r\n  const { _id, sender, receiver, amount, transactionType, reference, status } =\r\n    req.body\r\n\r\n  try {\r\n    if (status === 'accepted') {\r\n      const transaction = await Transaction.create({\r\n        sender,\r\n        receiver,\r\n        amount,\r\n        transactionType,\r\n        transactionId: crypto.randomBytes(5).toString('hex'),\r\n        reference,\r\n      })\r\n\r\n      await User.findByIdAndUpdate(sender, {\r\n        $inc: { balance: -amount },\r\n      })\r\n\r\n      await User.findByIdAndUpdate(receiver, {\r\n        $inc: { balance: amount },\r\n      })\r\n\r\n      await Request.findByIdAndUpdate(_id, { status }, { new: true })\r\n\r\n      return res.status(201).json(transaction)\r\n    }\r\n\r\n    else if (status === 'denied') {\r\n      const updatedRequest = await Request.findByIdAndUpdate(\r\n        _id,\r\n        { status: 'denied' },\r\n        { new: true }\r\n      )\r\n      return res.status(200).json({ message: 'Request denied', updatedRequest })\r\n    }\r\n\r\n    else if (status === 'pending') {\r\n      const updatedRequest = await Request.findByIdAndUpdate(\r\n        _id,\r\n        { status: 'pending' },\r\n        { new: true }\r\n      )\r\n      return res.status(200).json({ message: 'Marked as pay later', updatedRequest })\r\n    }\r\n\r\n    else {\r\n      res.status(400)\r\n      throw new Error('Invalid status update')\r\n    }\r\n  } catch (error) {\r\n    res.status(404)\r\n    throw new Error(error.message || 'Error updating request status')\r\n  }\r\n})\r\n\r\nmodule.exports = {\r\n  requestAmount,\r\n  getAllRequest,\r\n  updateRequestStats,\r\n  getRequestSendTransaction,\r\n  getRequestReceivedTransaction,\r\n}\r\n"],"file":"requestController.dev.js"}