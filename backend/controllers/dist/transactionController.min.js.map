{"version":3,"sources":["transactionController.js"],"names":["asyncHandler","require","User","crypto","req","res","_req$body","amount","sender","receiver","transactionType","reference","receiverUser","transfer","regeneratorRuntime","async","_context","prev","next","body","awrap","findById","sent","transferAmount","user","isVerified","status","Error","Transaction","create","randomBytes","toString","save","findByIdAndUpdate","$inc","balance","moneySend","new","transactionId","send","_id","stop","verifyReceiver","_context2","findOne","json","t0","getTransactions","id","transactions","_context3","params","console","log","find","$or","sort","createdAt","populate","path","select","getMoneySendTransactions","_context4","getMoneyReceiveTransactions","_context5","deposit","_context6","msg","concat","module","exports"],"mappings":"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","file":"transactionController.min.js","sourcesContent":["const asyncHandler = require('express-async-handler')\r\nconst User = require('../models/userModal')\r\nconst Transaction = require('../models/transactionModal')\r\nconst crypto = require('crypto')\r\n\r\n// @desc    Transfer money\r\n// @route   POST /api/transfer\r\n// @access  Private\r\nconst transferAmount = asyncHandler(async (req, res) => {\r\n  const { amount, sender, receiver, transactionType, reference } = req.body\r\n  const receiverUser = await User.findById(receiver)\r\n\r\n  if (\r\n    req.user._id != sender ||\r\n    !receiverUser ||\r\n    req.user.isVerified != true ||\r\n    !receiverUser.isVerified\r\n  ) {\r\n    res.status(400)\r\n    throw new Error('sender not verified or loggedin or receiver not found')\r\n  } else {\r\n    if (!amount || !sender || !receiver || !transactionType || !reference) {\r\n      res.status(400)\r\n      throw new Error('please include all fields')\r\n    }\r\n\r\n    const transfer = await Transaction.create({\r\n      amount,\r\n      sender,\r\n      receiver,\r\n      transactionType,\r\n      reference,\r\n      transactionId: crypto.randomBytes(5).toString('hex'),\r\n    })\r\n    await transfer.save()\r\n    await User.findByIdAndUpdate(sender, {\r\n      $inc: { balance: -amount },\r\n    })\r\n    await User.findByIdAndUpdate(receiver, {\r\n      $inc: { balance: amount },\r\n    })\r\n    await User.findByIdAndUpdate(\r\n      sender,\r\n      { $inc: { moneySend: 1 } },\r\n      { new: true }\r\n    )\r\n    await User.findByIdAndUpdate(\r\n      receiver,\r\n      { $inc: { moneyReceived: 1 } },\r\n      { new: true }\r\n    )\r\n\r\n    if (transfer) {\r\n      res.status(201).send({\r\n        _id: transfer._id,\r\n        amount: transfer.amount,\r\n        sender: transfer.sender,\r\n        receiver: transfer.receiver,\r\n        transactionType: transfer.transactionType,\r\n        reference: transfer.reference,\r\n        transactionId: transfer.transactionId,\r\n      })\r\n    } else {\r\n      res.status(404)\r\n      throw new Error('not created transfer')\r\n    }\r\n  }\r\n})\r\n\r\n// @desc    Transfer money(verify receiver)\r\n// @route   POST /api/verify-receiver\r\n// @access  Private\r\n\r\nconst verifyReceiver = asyncHandler(async (req, res) => {\r\n  try {\r\n    const user = await User.findOne({ _id: req.body.receiver })\r\n    if (user) {\r\n      res.status(200).json(user)\r\n    } else {\r\n      res.status(404)\r\n      throw new Error('receiver not found')\r\n    }\r\n  } catch (error) {\r\n    res.status(404)\r\n    throw new Error(error)\r\n  }\r\n})\r\n\r\n// @desc    get all transactions from a user\r\n// @route   GET /api/all_transaction\r\n// @access  Private\r\nconst getTransactions = asyncHandler(async (req, res) => {\r\n  const { id } = req.params\r\n  console.log(id)\r\n  const transactions = await Transaction.find({\r\n    $or: [{ sender: id }, { receiver: id }],\r\n  })\r\n    .sort({ createdAt: -1 })\r\n    .populate([\r\n      { path: 'sender', select: 'name image' },\r\n      { path: 'receiver', select: 'name image' },\r\n    ])\r\n  if (transactions) {\r\n    res.status(200).send(transactions)\r\n  } else {\r\n    res.status(400)\r\n    throw new Error('transaction not found')\r\n  }\r\n})\r\n\r\nconst getMoneySendTransactions = asyncHandler(async (req, res) => {\r\n  const transactions = await Transaction.find({ sender: req.user._id })\r\n    .sort({ createdAt: -1 })\r\n    .populate([\r\n      { path: 'sender', select: 'name image' },\r\n      { path: 'receiver', select: 'name image' },\r\n    ])\r\n\r\n  if (transactions) {\r\n    res.status(200).send(transactions)\r\n  } else {\r\n    res.status(400)\r\n    throw new Error('transactions not found')\r\n  }\r\n})\r\n\r\nconst getMoneyReceiveTransactions = asyncHandler(async (req, res) => {\r\n  const transactions = await Transaction.find({ receiver: req.user._id })\r\n    .sort({ createdAt: -1 })\r\n    .populate([\r\n      { path: 'sender', select: 'name image' },\r\n      { path: 'receiver', select: 'name image' },\r\n    ])\r\n\r\n  if (transactions) {\r\n    res.status(200).send(transactions)\r\n  } else {\r\n    res.status(400)\r\n    throw new Error('transactions not found')\r\n  }\r\n})\r\n\r\n// @desc    deposit money\r\n// @route   POST /api/deposit\r\n// @access  Private\r\nconst deposit = asyncHandler(async (req, res) => {\r\n  const { amount } = req.body\r\n  console.log(amount)\r\n  const user = await User.findById(req.user._id)\r\n\r\n  if (user) {\r\n    // const transaction = new Transaction({\r\n    //   sender: user._id,\r\n    //   receiver: user._id,\r\n    //   amount: amount,\r\n    //   transactionId: crypto.randomBytes(5).toString('hex'),\r\n    //   type: 'deposit',\r\n    //   reference: 'payment reference',\r\n    //   status: 'success',\r\n    // })\r\n\r\n    // await transaction.save()\r\n    await User.findByIdAndUpdate(\r\n      user._id,\r\n      { $inc: { balance: amount } },\r\n      { new: true }\r\n    )\r\n    res.status(200).json({ msg: `Rs${amount} added to your account` })\r\n  } else {\r\n    res.status(400)\r\n    throw new Error('user not found')\r\n  }\r\n})\r\n\r\nmodule.exports = {\r\n  transferAmount,\r\n  getTransactions,\r\n  verifyReceiver,\r\n  getMoneySendTransactions,\r\n  getMoneyReceiveTransactions,\r\n  deposit,\r\n}\r\n"]}