{"version":3,"sources":["transactionController.js"],"names":["asyncHandler","require","User","Transaction","crypto","transferAmount","req","res","body","amount","sender","receiver","transactionType","reference","findById","receiverUser","user","_id","isVerified","status","Error","create","transactionId","randomBytes","toString","transfer","save","findByIdAndUpdate","$inc","balance","moneySend","moneyReceived","send","verifyReceiver","findOne","json","getTransactions","id","params","console","log","find","$or","sort","createdAt","populate","path","select","transactions","getMoneySendTransactions","getMoneyReceiveTransactions","deposit","msg","module","exports"],"mappings":"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","sourcesContent":["const asyncHandler = require('express-async-handler')\r\nconst User = require('../models/userModal')\r\nconst Transaction = require('../models/transactionModal')\r\nconst crypto = require('crypto')\r\n\r\n// @desc    Transfer money\r\n// @route   POST /api/transfer\r\n// @access  Private\r\nconst transferAmount = asyncHandler(async (req, res) => {\r\n  const { amount, sender, receiver, transactionType, reference } = req.body\r\n  const receiverUser = await User.findById(receiver)\r\n\r\n  if (\r\n    req.user._id != sender ||\r\n    !receiverUser ||\r\n    req.user.isVerified != true ||\r\n    !receiverUser.isVerified\r\n  ) {\r\n    res.status(400)\r\n    throw new Error('sender not verified or loggedin or receiver not found')\r\n  } else {\r\n    if (!amount || !sender || !receiver || !transactionType || !reference) {\r\n      res.status(400)\r\n      throw new Error('please include all fields')\r\n    }\r\n\r\n    const transfer = await Transaction.create({\r\n      amount,\r\n      sender,\r\n      receiver,\r\n      transactionType,\r\n      reference,\r\n      transactionId: crypto.randomBytes(5).toString('hex'),\r\n    })\r\n    await transfer.save()\r\n    await User.findByIdAndUpdate(sender, {\r\n      $inc: { balance: -amount },\r\n    })\r\n    await User.findByIdAndUpdate(receiver, {\r\n      $inc: { balance: amount },\r\n    })\r\n    await User.findByIdAndUpdate(\r\n      sender,\r\n      { $inc: { moneySend: 1 } },\r\n      { new: true }\r\n    )\r\n    await User.findByIdAndUpdate(\r\n      receiver,\r\n      { $inc: { moneyReceived: 1 } },\r\n      { new: true }\r\n    )\r\n\r\n    if (transfer) {\r\n      res.status(201).send({\r\n        _id: transfer._id,\r\n        amount: transfer.amount,\r\n        sender: transfer.sender,\r\n        receiver: transfer.receiver,\r\n        transactionType: transfer.transactionType,\r\n        reference: transfer.reference,\r\n        transactionId: transfer.transactionId,\r\n      })\r\n    } else {\r\n      res.status(404)\r\n      throw new Error('not created transfer')\r\n    }\r\n  }\r\n})\r\n\r\n// @desc    Transfer money(verify receiver)\r\n// @route   POST /api/verify-receiver\r\n// @access  Private\r\n\r\nconst verifyReceiver = asyncHandler(async (req, res) => {\r\n  try {\r\n    const user = await User.findOne({ _id: req.body.receiver })\r\n    if (user) {\r\n      res.status(200).json(user)\r\n    } else {\r\n      res.status(404)\r\n      throw new Error('receiver not found')\r\n    }\r\n  } catch (error) {\r\n    res.status(404)\r\n    throw new Error(error)\r\n  }\r\n})\r\n\r\n// @desc    get all transactions from a user\r\n// @route   GET /api/all_transaction\r\n// @access  Private\r\nconst getTransactions = asyncHandler(async (req, res) => {\r\n  const { id } = req.params\r\n  console.log(id)\r\n  const transactions = await Transaction.find({\r\n    $or: [{ sender: id }, { receiver: id }],\r\n  })\r\n    .sort({ createdAt: -1 })\r\n    .populate([\r\n      { path: 'sender', select: 'name image' },\r\n      { path: 'receiver', select: 'name image' },\r\n    ])\r\n  if (transactions) {\r\n    res.status(200).send(transactions)\r\n  } else {\r\n    res.status(400)\r\n    throw new Error('transaction not found')\r\n  }\r\n})\r\n\r\nconst getMoneySendTransactions = asyncHandler(async (req, res) => {\r\n  const transactions = await Transaction.find({ sender: req.user._id })\r\n    .sort({ createdAt: -1 })\r\n    .populate([\r\n      { path: 'sender', select: 'name image' },\r\n      { path: 'receiver', select: 'name image' },\r\n    ])\r\n\r\n  if (transactions) {\r\n    res.status(200).send(transactions)\r\n  } else {\r\n    res.status(400)\r\n    throw new Error('transactions not found')\r\n  }\r\n})\r\n\r\nconst getMoneyReceiveTransactions = asyncHandler(async (req, res) => {\r\n  const transactions = await Transaction.find({ receiver: req.user._id })\r\n    .sort({ createdAt: -1 })\r\n    .populate([\r\n      { path: 'sender', select: 'name image' },\r\n      { path: 'receiver', select: 'name image' },\r\n    ])\r\n\r\n  if (transactions) {\r\n    res.status(200).send(transactions)\r\n  } else {\r\n    res.status(400)\r\n    throw new Error('transactions not found')\r\n  }\r\n})\r\n\r\n// @desc    deposit money\r\n// @route   POST /api/deposit\r\n// @access  Private\r\nconst deposit = asyncHandler(async (req, res) => {\r\n  const { amount } = req.body\r\n  console.log(amount)\r\n  const user = await User.findById(req.user._id)\r\n\r\n  if (user) {\r\n    // const transaction = new Transaction({\r\n    //   sender: user._id,\r\n    //   receiver: user._id,\r\n    //   amount: amount,\r\n    //   transactionId: crypto.randomBytes(5).toString('hex'),\r\n    //   type: 'deposit',\r\n    //   reference: 'payment reference',\r\n    //   status: 'success',\r\n    // })\r\n\r\n    // await transaction.save()\r\n    await User.findByIdAndUpdate(\r\n      user._id,\r\n      { $inc: { balance: amount } },\r\n      { new: true }\r\n    )\r\n    res.status(200).json({ msg: `Rs${amount} added to your account` })\r\n  } else {\r\n    res.status(400)\r\n    throw new Error('user not found')\r\n  }\r\n})\r\n\r\nmodule.exports = {\r\n  transferAmount,\r\n  getTransactions,\r\n  verifyReceiver,\r\n  getMoneySendTransactions,\r\n  getMoneyReceiveTransactions,\r\n  deposit,\r\n}\r\n"],"file":"transactionController.dev.js"}