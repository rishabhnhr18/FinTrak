{"version":3,"sources":["requestController.js"],"names":["asyncHandler","require","Request","Transaction","requestAmount","crypto","req","res","_req$body","receiver","amount","description","moneyreceiver","request","regeneratorRuntime","async","_context","prev","next","body","awrap","User","findById","sent","user","_id","status","Error","sender","save","findByIdAndUpdate","$inc","requestReceived","json","stop","getAllRequest","requests","_context2","find","populate","sort","createdAt","abrupt","t0","getRequestSendTransaction","_context3","path","select","$or","getRequestReceivedTransaction","_context4","updateRequestStats","_req$body2","transactionType","reference","transaction","updatedRequest","_updatedRequest","_context5","create","transactionId","randomBytes","toString","balance","new","message","module","exports"],"mappings":"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","file":"requestController.min.js","sourcesContent":["// const asyncHandler = require('express-async-handler')\r\n// const Request = require('../models/requestModal')\r\n// const Transaction = require('../models/transactionModal')\r\n// const User = require('../models/userModal')\r\n// const crypto = require('crypto')\r\n\r\n// // @desc    send request to another user\r\n// // @route   POST /api/request\r\n// // @access  Private\r\n\r\n// const requestAmount = asyncHandler(async (req, res) => {\r\n//   const { receiver, amount, description } = req.body\r\n//   const moneyreceiver = await User.findById(receiver)\r\n//   if (req.user._id == receiver || !moneyreceiver) {\r\n//     res.status(400)\r\n//     throw new Error('request not send')\r\n//   } else {\r\n//     try {\r\n//       if (!receiver || !amount || !description) {\r\n//         res.status(400)\r\n//         throw new Error('please include all fields')\r\n//       }\r\n//       const request = new Request({\r\n//         sender: req.user._id,\r\n//         receiver,\r\n//         amount,\r\n//         description,\r\n//       })\r\n//       await request.save()\r\n//       await User.findByIdAndUpdate(\r\n//         receiver,\r\n//         { $inc: { requestReceived: 1 } },\r\n//         { new: true }\r\n//       )\r\n//       res.status(201).json(request)\r\n//     } catch (error) {\r\n//       throw new Error(error)\r\n//     }\r\n//   }\r\n// })\r\n\r\n// // @desc    get all request for a user\r\n// // @route   POST /api/get-request\r\n// // @access  Private\r\n// const getAllRequest = asyncHandler(async (req, res) => {\r\n//   // console.log(req.user)\r\n//   try {\r\n//     const requests = await Request.find({\r\n//       $or: [{ sender: req.user._id }, { receiver: req.user._id }],\r\n//     })\r\n//       .populate('sender')\r\n//       .populate('receiver')\r\n//       .sort({ createdAt: -1 })\r\n      \r\n//     if (requests) {\r\n//       return res.status(200).json(requests)\r\n//     }\r\n//   } catch (error) {\r\n//     res.status(404)\r\n//     throw new Error(error)\r\n//   }\r\n// })\r\n\r\n// const getRequestSendTransaction = asyncHandler(async (req, res) => {\r\n//   const requests = await Request.find({ sender: req.user._id })\r\n//     .sort({ createdAt: -1 })\r\n//     .populate([\r\n//       { path: 'sender', select: 'name image' },\r\n//       { path: 'receiver', select: 'name image' },\r\n//     ])\r\n//   if (requests) {\r\n//     res.status(200).json(requests)\r\n//   } else {\r\n//     res.status(400)\r\n//     throw new Error('no requests send')\r\n//   }\r\n// })\r\n// const getRequestReceivedTransaction = asyncHandler(async (req, res) => {\r\n//   const requests = await Request.find({ receiver: req.user._id })\r\n//     .sort({ createdAt: -1 })\r\n//     .populate([\r\n//       { path: 'sender', select: 'name image' },\r\n//       { path: 'receiver', select: 'name image' },\r\n//     ])\r\n//   if (requests) {\r\n//     res.status(200).json(requests)\r\n//   } else {\r\n//     res.status(400)\r\n//     throw new Error('no requests received')\r\n//   }\r\n// })\r\n\r\n// // @desc    update request status\r\n// // @route   POST /api/update-request-status\r\n// // @access  Private\r\n// const updateRequestStats = asyncHandler(async (req, res) => {\r\n//   const { _id, sender, receiver, amount, transactionType, reference, status } =\r\n//     req.body\r\n\r\n//   try {\r\n//     if (status === 'accepted') {\r\n//       const transaction = await Transaction.create({\r\n//         sender: sender,\r\n//         receiver: receiver,\r\n//         amount: amount,\r\n//         transactionType: transactionType,\r\n//         transactionId: crypto.randomBytes(5).toString('hex'),\r\n//         reference: reference,\r\n//       })\r\n\r\n//       // await transaction.save()\r\n\r\n//       // deduct the amount from the sender\r\n//       await User.findByIdAndUpdate(sender, {\r\n//         $inc: { balance: -amount },\r\n//       })\r\n\r\n//       // add the amount to the receiver\r\n//       await User.findByIdAndUpdate(receiver, {\r\n//         $inc: { balance: amount },\r\n//       })\r\n//       res.status(201).json(transaction)\r\n\r\n//       await Request.findByIdAndUpdate(\r\n//         _id,\r\n//         {\r\n//           status: status,\r\n//         },\r\n//         { new: true }\r\n//       )\r\n//     }\r\n//   } catch (error) {\r\n//     res.status(404)\r\n//     throw new Error(error)\r\n//   }\r\n// })\r\n\r\n// module.exports = {\r\n//   requestAmount,\r\n//   getAllRequest,\r\n//   updateRequestStats,\r\n//   getRequestSendTransaction,\r\n//   getRequestReceivedTransaction,\r\n// }\r\nconst asyncHandler = require('express-async-handler')\r\nconst Request = require('../models/requestModal')\r\nconst Transaction = require('../models/transactionModal')\r\nconst User = require('../models/userModal')\r\nconst crypto = require('crypto')\r\n\r\n// @desc    send request to another user\r\n// @route   POST /api/request\r\n// @access  Private\r\nconst requestAmount = asyncHandler(async (req, res) => {\r\n  const { receiver, amount, description } = req.body\r\n  const moneyreceiver = await User.findById(receiver)\r\n\r\n  if (req.user._id == receiver || !moneyreceiver) {\r\n    res.status(400)\r\n    throw new Error('Request not sent')\r\n  }\r\n\r\n  if (!receiver || !amount || !description) {\r\n    res.status(400)\r\n    throw new Error('Please include all fields')\r\n  }\r\n\r\n  const request = new Request({\r\n    sender: req.user._id,\r\n    receiver,\r\n    amount,\r\n    description,\r\n  })\r\n\r\n  await request.save()\r\n\r\n  await User.findByIdAndUpdate(\r\n    receiver,\r\n    { $inc: { requestReceived: 1 } },\r\n    { new: true }\r\n  )\r\n\r\n  res.status(201).json(request)\r\n})\r\n\r\n// @desc    get all requests involving user\r\n// @route   POST /api/get-request\r\n// @access  Private\r\nconst getAllRequest = asyncHandler(async (req, res) => {\r\n  try {\r\n    const requests = await Request.find({\r\n      $or: [{ sender: req.user._id }, { receiver: req.user._id }],\r\n    })\r\n      .populate('sender')\r\n      .populate('receiver')\r\n      .sort({ createdAt: -1 })\r\n\r\n    if (requests) {\r\n      return res.status(200).json(requests)\r\n    }\r\n  } catch (error) {\r\n    res.status(404)\r\n    throw new Error(error)\r\n  }\r\n})\r\n\r\n// @desc    get all requests sent by user\r\n// @route   POST /api/request-sent\r\n// @access  Private\r\nconst getRequestSendTransaction = asyncHandler(async (req, res) => {\r\n  const requests = await Request.find({ sender: req.user._id })\r\n    .sort({ createdAt: -1 })\r\n    .populate([\r\n      { path: 'sender', select: 'name image' },\r\n      { path: 'receiver', select: 'name image' },\r\n    ])\r\n\r\n  if (requests) {\r\n    res.status(200).json(requests)\r\n  } else {\r\n    res.status(400)\r\n    throw new Error('No requests sent')\r\n  }\r\n})\r\n\r\n// @desc    get all requests received by user\r\n// @route   POST /api/request-received\r\n// @access  Private\r\nconst getRequestReceivedTransaction = asyncHandler(async (req, res) => {\r\n  const requests = await Request.find({ receiver: req.user._id })\r\n    .sort({ createdAt: -1 })\r\n    .populate([\r\n      { path: 'sender', select: 'name image' },\r\n      { path: 'receiver', select: 'name image' },\r\n    ])\r\n\r\n  if (requests) {\r\n    res.status(200).json(requests)\r\n  } else {\r\n    res.status(400)\r\n    throw new Error('No requests received')\r\n  }\r\n})\r\n\r\n// @desc    update request status (accepted, denied, or pending)\r\n// @route   POST /api/update-request-status\r\n// @access  Private\r\nconst updateRequestStats = asyncHandler(async (req, res) => {\r\n  const { _id, sender, receiver, amount, transactionType, reference, status } =\r\n    req.body\r\n\r\n  try {\r\n    if (status === 'accepted') {\r\n      const transaction = await Transaction.create({\r\n        sender,\r\n        receiver,\r\n        amount,\r\n        transactionType,\r\n        transactionId: crypto.randomBytes(5).toString('hex'),\r\n        reference,\r\n      })\r\n\r\n      await User.findByIdAndUpdate(sender, {\r\n        $inc: { balance: -amount },\r\n      })\r\n\r\n      await User.findByIdAndUpdate(receiver, {\r\n        $inc: { balance: amount },\r\n      })\r\n\r\n      await Request.findByIdAndUpdate(_id, { status }, { new: true })\r\n\r\n      return res.status(201).json(transaction)\r\n    }\r\n\r\n    else if (status === 'denied') {\r\n      const updatedRequest = await Request.findByIdAndUpdate(\r\n        _id,\r\n        { status: 'denied' },\r\n        { new: true }\r\n      )\r\n      return res.status(200).json({ message: 'Request denied', updatedRequest })\r\n    }\r\n\r\n    else if (status === 'pending') {\r\n      const updatedRequest = await Request.findByIdAndUpdate(\r\n        _id,\r\n        { status: 'pending' },\r\n        { new: true }\r\n      )\r\n      return res.status(200).json({ message: 'Marked as pay later', updatedRequest })\r\n    }\r\n\r\n    else {\r\n      res.status(400)\r\n      throw new Error('Invalid status update')\r\n    }\r\n  } catch (error) {\r\n    res.status(404)\r\n    throw new Error(error.message || 'Error updating request status')\r\n  }\r\n})\r\n\r\nmodule.exports = {\r\n  requestAmount,\r\n  getAllRequest,\r\n  updateRequestStats,\r\n  getRequestSendTransaction,\r\n  getRequestReceivedTransaction,\r\n}\r\n"]}